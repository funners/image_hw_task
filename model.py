# -*- coding = utf-8 -*-
# @File_name = model
from tensorflow.keras.layers import *
from tensorflow.keras.models import Model
def U_net(IMAGE_SIZE=256):
    img_input = Input(shape=(IMAGE_SIZE, IMAGE_SIZE, 1))
    x1 = Conv2D(64, (3,3), activation='relu', padding='same')(img_input)
    x1 = Conv2D(64, (3,3), activation='relu', padding='same')(x1)
    x1_pool = MaxPool2D((2,2))(x1)
    x2 = Conv2D(128, (3,3), activation='relu', padding='same')(x1_pool)
    x2 = Conv2D(128, (3,3), activation='relu', padding='same')(x2)
    x2_pool = MaxPool2D((2,2))(x2)
    x3 = Conv2D(256, (3,3), activation='relu', padding='same')(x2_pool)
    x3 = Conv2D(256, (3,3), activation='relu', padding='same')(x3)
    x3 = Conv2D(256, (3,3), activation='relu', padding='same')(x3)
    x3_pool = MaxPool2D((2,2))(x3)
    x4 = Conv2D(256, (3,3), activation='relu', padding='same')(x3_pool)
    x4 = Conv2D(256, (3,3), activation='relu', padding='same')(x4)
    x4 = Conv2D(256, (3,3), activation='relu', padding='same')(x4)
    x4_pool = UpSampling2D((2,2))(x4)
    x5 = Concatenate()([x4_pool, x3])
    x5 = Conv2D(128, (3,3), activation='relu', padding='same')(x5)
    x5 = Conv2D(128, (3,3), activation='relu', padding='same')(x5)
    x5_pool = UpSampling2D((2,2))(x5)
    x6 = Concatenate()([x5_pool, x2])
    x6 = Conv2D(64, (3,3), activation='relu', padding='same')(x6)
    x6 = Conv2D(64, (3,3), activation='relu', padding='same')(x6)
    x6_pool = UpSampling2D((2,2))(x6)
    x7 = Concatenate()([x6_pool, x1])
    x7 = Conv2D(64, (3,3), activation='relu', padding='same')(x7)
    x7 = Conv2D(64, (3,3), activation='relu', padding='same')(x7)
    x7 = Conv2D(1, (3,3), activation='sigmoid', padding='same')(x7)
    model = Model(img_input, x7)
    return model

def U_net_with_hf(IMAGE_SIZE=256):
    img_input = Input(shape=(IMAGE_SIZE, IMAGE_SIZE, 2))
    x1 = Conv2D(1, (1, 1))(img_input)
    x1 = Conv2D(64, (3,3), activation='relu', padding='same')(x1)
    x1 = Conv2D(64, (3,3), activation='relu', padding='same')(x1)
    x1_pool = MaxPool2D((2,2))(x1)
    x2 = Conv2D(128, (3,3), activation='relu', padding='same')(x1_pool)
    x2 = Conv2D(128, (3,3), activation='relu', padding='same')(x2)
    x2_pool = MaxPool2D((2,2))(x2)
    x3 = Conv2D(256, (3,3), activation='relu', padding='same')(x2_pool)
    x3 = Conv2D(256, (3,3), activation='relu', padding='same')(x3)
    x3 = Conv2D(256, (3,3), activation='relu', padding='same')(x3)
    x3_pool = MaxPool2D((2,2))(x3)
    x4 = Conv2D(256, (3,3), activation='relu', padding='same')(x3_pool)
    x4 = Conv2D(256, (3,3), activation='relu', padding='same')(x4)
    x4 = Conv2D(256, (3,3), activation='relu', padding='same')(x4)
    x4_pool = UpSampling2D((2,2))(x4)
    x5 = Concatenate()([x4_pool, x3])
    x5 = Conv2D(128, (3,3), activation='relu', padding='same')(x5)
    x5 = Conv2D(128, (3,3), activation='relu', padding='same')(x5)
    x5_pool = UpSampling2D((2,2))(x5)
    x6 = Concatenate()([x5_pool, x2])
    x6 = Conv2D(64, (3,3), activation='relu', padding='same')(x6)
    x6 = Conv2D(64, (3,3), activation='relu', padding='same')(x6)
    x6_pool = UpSampling2D((2,2))(x6)
    x7 = Concatenate()([x6_pool, x1])
    x7 = Conv2D(64, (3,3), activation='relu', padding='same')(x7)
    x7 = Conv2D(64, (3,3), activation='relu', padding='same')(x7)
    x7 = Conv2D(1, (3,3), activation='sigmoid', padding='same')(x7)
    model = Model(img_input, x7)
    return model